
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

logging.basicConfig(level=logging.INFO)

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN")
# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    contract = State()
    static_id = State()
    quantity = State()
    screenshot = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏
def contract_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("–ê—Ç–µ–ª—å–µ III - 1000"),
        KeyboardButton("–¢–æ–≤–∞—Ä —Å –∫–æ—Ä–∞–±–ª—è - 600"),
    )
    kb.add(
        KeyboardButton("–ê–ø–µ–ª—å—Å–∏–Ω—ã - 24"),
        KeyboardButton("–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 80"),
    )
    kb.add(
        KeyboardButton("–°–æ—Å–Ω–∞ - 100"),
        KeyboardButton("–ü—à–µ–Ω–∏—Ü–∞ - 250"),
    )
    return kb

# –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
back_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"))

# /start
@dp.message_handler(commands="start")
async def start(message: types.Message):
    await Form.contract.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=contract_keyboard())

# –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
@dp.message_handler(state=Form.contract)
async def process_contract(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ", reply_markup=contract_keyboard())
        return
    await state.update_data(contract=message.text)
    await Form.static_id.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=back_kb)

# –í–≤–æ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ID
@dp.message_handler(state=Form.static_id)
async def process_static_id(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await Form.contract.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=contract_keyboard())
        return
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID!")
        return
    await state.update_data(static_id=int(message.text))
    await Form.quantity.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=back_kb)

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message_handler(state=Form.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await Form.static_id.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=back_kb)
        return
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        return
    await state.update_data(quantity=int(message.text))
    await Form.screenshot.set()
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=back_kb)

# –ü—Ä–∏—Å—ã–ª–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.screenshot)
async def process_screenshot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {data['contract']}\nID: {data['static_id']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}"
    )
    await message.answer("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Çüëå")
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É
    await Form.contract.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=contract_keyboard())

# –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" –ø—Ä–∏ —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", state=Form.screenshot)
async def back_from_screenshot(message: types.Message):
    await Form.quantity.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=back_kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
