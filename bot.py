
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –¢–≤–æ–π Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM
class Form(StatesGroup):
    contract = State()
    static_id = State()
    quantity = State()
    photo = State()

# –ö–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
def get_contract_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ê—Ç–µ–ª—å–µ III - 1000", "–¢–æ–≤–∞—Ä —Å –∫–æ—Ä–∞–±–ª—è - 600")
    kb.add("–ê–ø–µ–ª—å—Å–∏–Ω—ã - 24", "–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 80")
    kb.add("–°–æ—Å–Ω–∞ - 100", "–ü—à–µ–Ω–∏—Ü–∞ - 250")
    return kb

# –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
def get_back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await Form.contract.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=get_contract_keyboard())

# –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
@dp.message_handler(state=Form.contract)
async def process_contract(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=get_contract_keyboard())
        return

    contracts = ["–ê—Ç–µ–ª—å–µ III - 1000", "–¢–æ–≤–∞—Ä —Å –∫–æ—Ä–∞–±–ª—è - 600",
                 "–ê–ø–µ–ª—å—Å–∏–Ω—ã - 24", "–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 80", "–°–æ—Å–Ω–∞ - 100", "–ü—à–µ–Ω–∏—Ü–∞ - 250"]
    if message.text not in contracts:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")
        return

    await state.update_data(contract=message.text)
    await Form.next()  # static_id
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=get_back_keyboard())

# –í–≤–æ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ID
@dp.message_handler(state=Form.static_id)
async def process_static_id(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await Form.contract.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=get_contract_keyboard())
        return
    if not message.text.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(static_id=int(message.text))
    await Form.next()  # quantity
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=get_back_keyboard())

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message_handler(state=Form.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
        await Form.static_id.set()
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=get_back_keyboard())
        return
    if not message.text.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(quantity=int(message.text))
    await Form.next()  # photo
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=get_back_keyboard())

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo)
async def process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo = message.photo[-1].file_id
    await bot.send_photo(chat_id=ADMIN_ID, photo=photo,
                         caption=f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {data['contract']}\n"
                                 f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID: {data['static_id']}\n"
                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}")
    await message.answer("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Çüëå", reply_markup=get_contract_keyboard())
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
    await Form.contract.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=get_contract_keyboard())
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥" –Ω–∞ —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", state=Form.photo)
async def back_from_photo(message: types.Message):
    await Form.quantity.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=get_back_keyboard())

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –∫–Ω–æ–ø–∫–∞
@dp.message_handler(state=Form.photo)
async def check_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
