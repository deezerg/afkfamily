
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –í–∞—à Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ReportStates(StatesGroup):
    CHOOSING_CONTRACT = State()
    ENTER_ID = State()
    ENTER_QUANTITY = State()
    SEND_PHOTO = State()

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
contracts = [
    ("–ê—Ç–µ–ª—å–µ III - 1000", "contract_1"),
    ("–¢–æ–≤–∞—Ä —Å –∫–æ—Ä–∞–±–ª—è - 600", "contract_2"),
    ("–ê–ø–µ–ª—å—Å–∏–Ω—ã - 24", "contract_3"),
    ("–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 80", "contract_4"),
    ("–°–æ—Å–Ω–∞ - 100", "contract_5"),
    ("–ü—à–µ–Ω–∏—Ü–∞ - 250", "contract_6")
]

# –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
back_button = InlineKeyboardMarkup().add(InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back"))

# /start –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for name, callback in contracts:
        keyboard.add(InlineKeyboardButton(text=name, callback_data=callback))
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=keyboard)
    await ReportStates.CHOOSING_CONTRACT.set()

# –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith("contract_"), state=ReportStates.CHOOSING_CONTRACT)
async def choose_contract(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(contract=call.data)
    await call.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=back_button)
    await ReportStates.ENTER_ID.set()

# –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
@dp.callback_query_handler(lambda c: c.data == "back", state="*")
async def go_back(call: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ReportStates.ENTER_ID.state or current_state == ReportStates.ENTER_QUANTITY.state or current_state == ReportStates.SEND_PHOTO.state:
        keyboard = InlineKeyboardMarkup(row_width=2)
        for name, callback in contracts:
            keyboard.add(InlineKeyboardButton(text=name, callback_data=callback))
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–Ω–æ–≤–æ:", reply_markup=keyboard)
        await ReportStates.CHOOSING_CONTRACT.set()
        await state.update_data(contract=None, user_id=None, quantity=None, photo=None)
    await call.answer()

# –í–≤–æ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ID
@dp.message_handler(lambda message: not message.text.isdigit(), state=ReportStates.ENTER_ID)
async def invalid_id(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ID!")

@dp.message_handler(lambda message: message.text.isdigit(), state=ReportStates.ENTER_ID)
async def enter_id(message: types.Message, state: FSMContext):
    await state.update_data(user_id=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=back_button)
    await ReportStates.ENTER_QUANTITY.set()

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message_handler(lambda message: not message.text.isdigit(), state=ReportStates.ENTER_QUANTITY)
async def invalid_quantity(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π!")

@dp.message_handler(lambda message: message.text.isdigit(), state=ReportStates.ENTER_QUANTITY)
async def enter_quantity(message: types.Message, state: FSMContext):
    await state.update_data(quantity=int(message.text))
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=back_button)
    await ReportStates.SEND_PHOTO.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=ReportStates.SEND_PHOTO)

async def receive_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(photo=message.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
    report_text = (
        f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç!\n"
        f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {data.get('contract')}\n"
        f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID: {data.get('user_id')}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('quantity')}"
    )
    await bot.send_message(ADMIN_ID, report_text)
    await bot.send_photo(ADMIN_ID, data.get("photo"))

    await message.answer("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Çüëå")
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    for name, callback in contracts:
        keyboard.add(InlineKeyboardButton(text=name, callback_data=callback))
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç:", reply_markup=keyboard)
    await ReportStates.CHOOSING_CONTRACT.set()
    await state.update_data(contract=None, user_id=None, quantity=None, photo=None)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: message.content_type != 'photo', state=ReportStates.SEND_PHOTO)
async def invalid_photo(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
