
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ReportStates(StatesGroup):
    CHOOSE_CONTRACT = State()
    ENTER_ID = State()
    ENTER_QUANTITY = State()
    SEND_PHOTO = State()

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
contracts = [
    ("–ê—Ç–µ–ª—å–µ III - 1000", "1000"),
    ("–¢–æ–≤–∞—Ä —Å –∫–æ—Ä–∞–±–ª—è - 600", "600"),
    ("–ê–ø–µ–ª—å—Å–∏–Ω—ã - 24", "24"),
    ("–®–∞–º–ø–∏–Ω—å–æ–Ω—ã - 80", "80"),
    ("–°–æ—Å–Ω–∞ - 100", "100"),
    ("–ü—à–µ–Ω–∏—Ü–∞ - 250", "250"),
]

# –ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
back_button = KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")

def contract_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for name, _ in contracts:
        kb.add(KeyboardButton(name))
    return kb

def back_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(back_button)
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–∏–∂–µ:",
        reply_markup=contract_keyboard()
    )
    await ReportStates.CHOOSE_CONTRACT.set()

# –í—ã–±–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
@dp.message_handler(state=ReportStates.CHOOSE_CONTRACT)
async def choose_contract(message: types.Message, state: FSMContext):
    if message.text == back_button.text:
        await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.", reply_markup=contract_keyboard())
        return

    selected = next((name for name, _ in contracts if name == message.text), None)
    if selected:
        await state.update_data(contract=selected)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID:", reply_markup=back_keyboard())
        await ReportStates.ENTER_ID.set()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=contract_keyboard())

# –í–≤–æ–¥ ID
@dp.message_handler(state=ReportStates.ENTER_ID)
async def enter_id(message: types.Message, state: FSMContext):
    if message.text == back_button.text:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.", reply_markup=contract_keyboard())
        await ReportStates.CHOOSE_CONTRACT.set()
        return

    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID!")
        return

    await state.update_data(user_id=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∫ –æ—Ç–≥—Ä—É–∑–∫–µ:", reply_markup=back_keyboard())
    await ReportStates.ENTER_QUANTITY.set()

# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.message_handler(state=ReportStates.ENTER_QUANTITY)
async def enter_quantity(message: types.Message, state: FSMContext):
    if message.text == back_button.text:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ID:", reply_markup=back_keyboard())
        await ReportStates.ENTER_ID.set()
        return

    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
        return

    await state.update_data(quantity=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=back_keyboard())
    await ReportStates.SEND_PHOTO.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO, state=ReportStates.SEND_PHOTO)
async def handle_photo(message: types.Message, state: FSMContext):
    if message.text == back_button.text:
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", reply_markup=back_keyboard())
        await ReportStates.ENTER_QUANTITY.set()
        return

    data = await state.get_data()
    contract = data.get("contract")
    user_id = data.get("user_id")
    quantity = data.get("quantity")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É
    photo_file = message.photo[-1].file_id
    await bot.send_message(
        ADMIN_ID,
        f"–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}\n"
        f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ID: {user_id}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
    )
    await bot.send_photo(ADMIN_ID, photo_file)

    await message.answer("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç üëå", reply_markup=contract_keyboard())
    await ReportStates.CHOOSE_CONTRACT.set()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ç–æ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ)
@dp.message_handler(lambda message: True, state=ReportStates.SEND_PHOTO)
async def check_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞!")

# –õ–æ–≤—É—à–∫–∞ –Ω–∞ –≤—Å–µ —ç—Ç–∞–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
@dp.message_handler(state='*')
async def catch_all(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
